// Code generated by muxt. DO NOT EDIT.
// muxt version: v0.11.2

package hypertext

import (
	"bytes"
	"context"
	"net/http"
	"strconv"

	"github.com/crhntr/muxt-example-htmx-sortable/internal/database"
)

type RoutesReceiver interface {
	Lists(ctx context.Context) []database.List
	GetList(ctx context.Context, id int32) ListData
	UpdateList(ctx context.Context, listID int32, form UpdateListForm) ListData
}

func Routes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("GET /", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		data := receiver.Lists(ctx)
		execute(response, request, true, "GET / Lists(ctx)", http.StatusOK, data)
	})
	mux.HandleFunc("GET /list/{id}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 32)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := int32(idParsed)
		data := receiver.GetList(ctx, id)
		execute(response, request, true, "GET /list/{id} GetList(ctx, id)", http.StatusOK, data)
	})
	mux.HandleFunc("POST /list/{id}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 32)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := int32(idParsed)
		request.ParseForm()
		var form UpdateListForm
		for _, val := range request.Form["task-id"] {
			value, err := strconv.ParseInt(val, 10, 32)
			if err != nil {
				http.Error(response, err.Error(), http.StatusBadRequest)
				return
			}
			form.TaskIDs = append(form.TaskIDs, int32(value))
		}
		data := receiver.UpdateList(ctx, id, form)
		execute(response, request, true, "POST /list/{id} UpdateList(ctx, id, form)", http.StatusOK, data)
	})
}

func execute(response http.ResponseWriter, request *http.Request, writeHeader bool, name string, code int, data any) {
	buf := bytes.NewBuffer(nil)
	if err := templates.ExecuteTemplate(buf, name, data); err != nil {
		http.Error(response, err.Error(), http.StatusInternalServerError)
		return
	}
	if writeHeader {
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.WriteHeader(code)
	}
	_, _ = buf.WriteTo(response)
}
