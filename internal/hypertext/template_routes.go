// Code generated by muxt. DO NOT EDIT.
// muxt version: v0.14.2

package hypertext

import (
	"bytes"
	"context"
	"net/http"
	"path"
	"strconv"

	"github.com/crhntr/muxt-example-htmx-sortable/internal/database"
)

type RoutesReceiver interface {
	Lists(ctx context.Context) []database.List
	GetList(ctx context.Context, id int32) ListData
	UpdateList(ctx context.Context, listID int32, form UpdateListForm) ListData
}

func Routes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("GET /", func(res http.ResponseWriter, request *http.Request) {
		var response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		ctx := request.Context()
		result := receiver.Lists(ctx)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "GET / Lists(ctx)", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		statusCode := http.StatusOK
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /list/{id}", func(res http.ResponseWriter, request *http.Request) {
		var response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 32)
		if err != nil {
			http.Error(res, err.Error(), http.StatusBadRequest)
			return
		}
		id := int32(idParsed)
		result := receiver.GetList(ctx, id)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "GET /list/{id} GetList(ctx, id)", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		statusCode := http.StatusOK
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("POST /list/{id}", func(res http.ResponseWriter, request *http.Request) {
		var response = &TemplateResponseWriter{underlying: res, statusCode: http.StatusOK}
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 32)
		if err != nil {
			http.Error(res, err.Error(), http.StatusBadRequest)
			return
		}
		id := int32(idParsed)
		request.ParseForm()
		var form UpdateListForm
		for _, val := range request.Form["task-id"] {
			value, err := strconv.ParseInt(val, 10, 32)
			if err != nil {
				http.Error(res, err.Error(), http.StatusBadRequest)
				return
			}
			form.TaskIDs = append(form.TaskIDs, int32(value))
		}
		result := receiver.UpdateList(ctx, id, form)
		buf := bytes.NewBuffer(nil)
		rd := newTemplateData(result, request)
		if err := templates.ExecuteTemplate(buf, "POST /list/{id} UpdateList(ctx, id, form)", rd); err != nil {
			http.Error(res, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.Header().Set("content-length", strconv.Itoa(buf.Len()))
		statusCode := http.StatusOK
		response.WriteHeader(statusCode)
		_, _ = buf.WriteTo(response)
	})
}

type TemplateResponseWriter struct {
	underlying http.ResponseWriter
	statusCode int
}

func (res *TemplateResponseWriter) Header() http.Header {
	return res.underlying.Header()
}

func (res *TemplateResponseWriter) Write(in []byte) (int, error) {
	if res.statusCode != 0 {
		res.underlying.WriteHeader(res.statusCode)
		res.statusCode = 0
	}
	return res.underlying.Write(in)
}

func (res *TemplateResponseWriter) WriteHeader(statusCode int) {
	res.statusCode = statusCode
}

func (res *TemplateResponseWriter) Unwrap() http.ResponseWriter {
	return res.underlying
}

type TemplateData[T any] struct {
	request *http.Request
	result  T
}

func (TemplateData[T]) Path() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (data TemplateData[T]) Result() T {
	return data.result
}

func (data TemplateData[T]) Request() *http.Request {
	return data.request
}

func newTemplateData[T any](result T, request *http.Request) TemplateData[T] {
	return TemplateData[T]{result: result, request: request}
}

type TemplateRoutePaths struct {
}

func TemplateRoutePath() TemplateRoutePaths {
	return TemplateRoutePaths{}
}

func (TemplateRoutePaths) Lists() string {
	return "/"
}

func (TemplateRoutePaths) GetList(id int32) string {
	return "/" + path.Join("list", strconv.FormatInt(int64(id), 10))
}

func (TemplateRoutePaths) UpdateList(id int32) string {
	return "/" + path.Join("list", strconv.FormatInt(int64(id), 10))
}
