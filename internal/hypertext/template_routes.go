// Code generated by muxt. DO NOT EDIT.
// muxt version: v0.12.0-pre.1

package hypertext

import (
	"bytes"
	"context"
	"net/http"
	"strconv"

	"github.com/crhntr/muxt-example-htmx-sortable/internal/database"
)

type (
	RoutesReceiver interface {
		Lists(ctx context.Context) []database.List
		GetList(ctx context.Context, id int32) ListData
		UpdateList(ctx context.Context, listID int32, form UpdateListForm) ListData
	}
	responseData[T any] struct {
		Request *http.Request
		Data    T
	}
)

func newResponseData[T any](data T, request *http.Request) responseData[T] {
	return responseData[T]{Data: data, Request: request}
}

func Routes(mux *http.ServeMux, receiver RoutesReceiver) {
	mux.HandleFunc("GET /", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		data := receiver.Lists(ctx)
		buf := bytes.NewBuffer(nil)
		rd := newResponseData(data, request)
		if err := templates.ExecuteTemplate(buf, "GET / Lists(ctx)", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.WriteHeader(http.StatusOK)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("GET /list/{id}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 32)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := int32(idParsed)
		data := receiver.GetList(ctx, id)
		buf := bytes.NewBuffer(nil)
		rd := newResponseData(data, request)
		if err := templates.ExecuteTemplate(buf, "GET /list/{id} GetList(ctx, id)", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.WriteHeader(http.StatusOK)
		_, _ = buf.WriteTo(response)
	})
	mux.HandleFunc("POST /list/{id}", func(response http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		idParsed, err := strconv.ParseInt(request.PathValue("id"), 10, 32)
		if err != nil {
			http.Error(response, err.Error(), http.StatusBadRequest)
			return
		}
		id := int32(idParsed)
		request.ParseForm()
		var form UpdateListForm
		for _, val := range request.Form["task-id"] {
			value, err := strconv.ParseInt(val, 10, 32)
			if err != nil {
				http.Error(response, err.Error(), http.StatusBadRequest)
				return
			}
			form.TaskIDs = append(form.TaskIDs, int32(value))
		}
		data := receiver.UpdateList(ctx, id, form)
		buf := bytes.NewBuffer(nil)
		rd := newResponseData(data, request)
		if err := templates.ExecuteTemplate(buf, "POST /list/{id} UpdateList(ctx, id, form)", rd); err != nil {
			http.Error(response, err.Error(), http.StatusInternalServerError)
			return
		}
		response.Header().Set("content-type", "text/html; charset=utf-8")
		response.WriteHeader(http.StatusOK)
		_, _ = buf.WriteTo(response)
	})
}
