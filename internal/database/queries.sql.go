// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
)

const listByID = `-- name: ListByID :one
SELECT id, name FROM list WHERE id = $1
`

// interface: ReadOnlyQuerier TaskPriorityUpdater
func (q *Queries) ListByID(ctx context.Context, id int32) (List, error) {
	row := q.db.QueryRow(ctx, listByID, id)
	var i List
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const lists = `-- name: Lists :many
SELECT id, name FROM list
`

// interface: ReadOnlyQuerier
func (q *Queries) Lists(ctx context.Context) ([]List, error) {
	rows, err := q.db.Query(ctx, lists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTaskPriority = `-- name: SetTaskPriority :exec
UPDATE task SET priority = $1 WHERE id = $2
`

type SetTaskPriorityParams struct {
	Priority int32
	ID       int32
}

// interface: TaskPriorityUpdater
func (q *Queries) SetTaskPriority(ctx context.Context, arg SetTaskPriorityParams) error {
	_, err := q.db.Exec(ctx, setTaskPriority, arg.Priority, arg.ID)
	return err
}

const tasksByListID = `-- name: TasksByListID :many
SELECT task.id, task.list_id, task.plan_id, task.priority, plan.instructions FROM task JOIN plan ON plan.id = plan_id WHERE list_id = $1 ORDER BY priority DESC
`

type TasksByListIDRow struct {
	ID           int32
	ListID       int32
	PlanID       int32
	Priority     int32
	Instructions string
}

// interface: ReadOnlyQuerier
func (q *Queries) TasksByListID(ctx context.Context, id int32) ([]TasksByListIDRow, error) {
	rows, err := q.db.Query(ctx, tasksByListID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TasksByListIDRow
	for rows.Next() {
		var i TasksByListIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.PlanID,
			&i.Priority,
			&i.Instructions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
