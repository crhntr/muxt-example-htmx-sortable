// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/crhntr/muxt-example-htmx-sortable/internal/database"
	"github.com/crhntr/muxt-example-htmx-sortable/internal/domain"
)

type TransactionManager struct {
	ReadOnlyStub        func(context.Context, database.ReadOnlyFunc) error
	readOnlyMutex       sync.RWMutex
	readOnlyArgsForCall []struct {
		arg1 context.Context
		arg2 database.ReadOnlyFunc
	}
	readOnlyReturns struct {
		result1 error
	}
	readOnlyReturnsOnCall map[int]struct {
		result1 error
	}
	UpdatePriorityListStub        func(context.Context, database.TaskPriorityUpdateFunc) error
	updatePriorityListMutex       sync.RWMutex
	updatePriorityListArgsForCall []struct {
		arg1 context.Context
		arg2 database.TaskPriorityUpdateFunc
	}
	updatePriorityListReturns struct {
		result1 error
	}
	updatePriorityListReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TransactionManager) ReadOnly(arg1 context.Context, arg2 database.ReadOnlyFunc) error {
	fake.readOnlyMutex.Lock()
	ret, specificReturn := fake.readOnlyReturnsOnCall[len(fake.readOnlyArgsForCall)]
	fake.readOnlyArgsForCall = append(fake.readOnlyArgsForCall, struct {
		arg1 context.Context
		arg2 database.ReadOnlyFunc
	}{arg1, arg2})
	stub := fake.ReadOnlyStub
	fakeReturns := fake.readOnlyReturns
	fake.recordInvocation("ReadOnly", []interface{}{arg1, arg2})
	fake.readOnlyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TransactionManager) ReadOnlyCallCount() int {
	fake.readOnlyMutex.RLock()
	defer fake.readOnlyMutex.RUnlock()
	return len(fake.readOnlyArgsForCall)
}

func (fake *TransactionManager) ReadOnlyCalls(stub func(context.Context, database.ReadOnlyFunc) error) {
	fake.readOnlyMutex.Lock()
	defer fake.readOnlyMutex.Unlock()
	fake.ReadOnlyStub = stub
}

func (fake *TransactionManager) ReadOnlyArgsForCall(i int) (context.Context, database.ReadOnlyFunc) {
	fake.readOnlyMutex.RLock()
	defer fake.readOnlyMutex.RUnlock()
	argsForCall := fake.readOnlyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TransactionManager) ReadOnlyReturns(result1 error) {
	fake.readOnlyMutex.Lock()
	defer fake.readOnlyMutex.Unlock()
	fake.ReadOnlyStub = nil
	fake.readOnlyReturns = struct {
		result1 error
	}{result1}
}

func (fake *TransactionManager) ReadOnlyReturnsOnCall(i int, result1 error) {
	fake.readOnlyMutex.Lock()
	defer fake.readOnlyMutex.Unlock()
	fake.ReadOnlyStub = nil
	if fake.readOnlyReturnsOnCall == nil {
		fake.readOnlyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.readOnlyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TransactionManager) UpdatePriorityList(arg1 context.Context, arg2 database.TaskPriorityUpdateFunc) error {
	fake.updatePriorityListMutex.Lock()
	ret, specificReturn := fake.updatePriorityListReturnsOnCall[len(fake.updatePriorityListArgsForCall)]
	fake.updatePriorityListArgsForCall = append(fake.updatePriorityListArgsForCall, struct {
		arg1 context.Context
		arg2 database.TaskPriorityUpdateFunc
	}{arg1, arg2})
	stub := fake.UpdatePriorityListStub
	fakeReturns := fake.updatePriorityListReturns
	fake.recordInvocation("UpdatePriorityList", []interface{}{arg1, arg2})
	fake.updatePriorityListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TransactionManager) UpdatePriorityListCallCount() int {
	fake.updatePriorityListMutex.RLock()
	defer fake.updatePriorityListMutex.RUnlock()
	return len(fake.updatePriorityListArgsForCall)
}

func (fake *TransactionManager) UpdatePriorityListCalls(stub func(context.Context, database.TaskPriorityUpdateFunc) error) {
	fake.updatePriorityListMutex.Lock()
	defer fake.updatePriorityListMutex.Unlock()
	fake.UpdatePriorityListStub = stub
}

func (fake *TransactionManager) UpdatePriorityListArgsForCall(i int) (context.Context, database.TaskPriorityUpdateFunc) {
	fake.updatePriorityListMutex.RLock()
	defer fake.updatePriorityListMutex.RUnlock()
	argsForCall := fake.updatePriorityListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TransactionManager) UpdatePriorityListReturns(result1 error) {
	fake.updatePriorityListMutex.Lock()
	defer fake.updatePriorityListMutex.Unlock()
	fake.UpdatePriorityListStub = nil
	fake.updatePriorityListReturns = struct {
		result1 error
	}{result1}
}

func (fake *TransactionManager) UpdatePriorityListReturnsOnCall(i int, result1 error) {
	fake.updatePriorityListMutex.Lock()
	defer fake.updatePriorityListMutex.Unlock()
	fake.UpdatePriorityListStub = nil
	if fake.updatePriorityListReturnsOnCall == nil {
		fake.updatePriorityListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updatePriorityListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TransactionManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readOnlyMutex.RLock()
	defer fake.readOnlyMutex.RUnlock()
	fake.updatePriorityListMutex.RLock()
	defer fake.updatePriorityListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TransactionManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.TransactionManager = new(TransactionManager)
