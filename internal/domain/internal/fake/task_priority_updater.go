// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/crhntr/muxt-example-htmx-sortable/internal/database"
)

type TaskPriorityUpdater struct {
	ListByIDStub        func(context.Context, int32) (database.List, error)
	listByIDMutex       sync.RWMutex
	listByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int32
	}
	listByIDReturns struct {
		result1 database.List
		result2 error
	}
	listByIDReturnsOnCall map[int]struct {
		result1 database.List
		result2 error
	}
	SetTaskPriorityStub        func(context.Context, database.SetTaskPriorityParams) error
	setTaskPriorityMutex       sync.RWMutex
	setTaskPriorityArgsForCall []struct {
		arg1 context.Context
		arg2 database.SetTaskPriorityParams
	}
	setTaskPriorityReturns struct {
		result1 error
	}
	setTaskPriorityReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TaskPriorityUpdater) ListByID(arg1 context.Context, arg2 int32) (database.List, error) {
	fake.listByIDMutex.Lock()
	ret, specificReturn := fake.listByIDReturnsOnCall[len(fake.listByIDArgsForCall)]
	fake.listByIDArgsForCall = append(fake.listByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int32
	}{arg1, arg2})
	stub := fake.ListByIDStub
	fakeReturns := fake.listByIDReturns
	fake.recordInvocation("ListByID", []interface{}{arg1, arg2})
	fake.listByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TaskPriorityUpdater) ListByIDCallCount() int {
	fake.listByIDMutex.RLock()
	defer fake.listByIDMutex.RUnlock()
	return len(fake.listByIDArgsForCall)
}

func (fake *TaskPriorityUpdater) ListByIDCalls(stub func(context.Context, int32) (database.List, error)) {
	fake.listByIDMutex.Lock()
	defer fake.listByIDMutex.Unlock()
	fake.ListByIDStub = stub
}

func (fake *TaskPriorityUpdater) ListByIDArgsForCall(i int) (context.Context, int32) {
	fake.listByIDMutex.RLock()
	defer fake.listByIDMutex.RUnlock()
	argsForCall := fake.listByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TaskPriorityUpdater) ListByIDReturns(result1 database.List, result2 error) {
	fake.listByIDMutex.Lock()
	defer fake.listByIDMutex.Unlock()
	fake.ListByIDStub = nil
	fake.listByIDReturns = struct {
		result1 database.List
		result2 error
	}{result1, result2}
}

func (fake *TaskPriorityUpdater) ListByIDReturnsOnCall(i int, result1 database.List, result2 error) {
	fake.listByIDMutex.Lock()
	defer fake.listByIDMutex.Unlock()
	fake.ListByIDStub = nil
	if fake.listByIDReturnsOnCall == nil {
		fake.listByIDReturnsOnCall = make(map[int]struct {
			result1 database.List
			result2 error
		})
	}
	fake.listByIDReturnsOnCall[i] = struct {
		result1 database.List
		result2 error
	}{result1, result2}
}

func (fake *TaskPriorityUpdater) SetTaskPriority(arg1 context.Context, arg2 database.SetTaskPriorityParams) error {
	fake.setTaskPriorityMutex.Lock()
	ret, specificReturn := fake.setTaskPriorityReturnsOnCall[len(fake.setTaskPriorityArgsForCall)]
	fake.setTaskPriorityArgsForCall = append(fake.setTaskPriorityArgsForCall, struct {
		arg1 context.Context
		arg2 database.SetTaskPriorityParams
	}{arg1, arg2})
	stub := fake.SetTaskPriorityStub
	fakeReturns := fake.setTaskPriorityReturns
	fake.recordInvocation("SetTaskPriority", []interface{}{arg1, arg2})
	fake.setTaskPriorityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TaskPriorityUpdater) SetTaskPriorityCallCount() int {
	fake.setTaskPriorityMutex.RLock()
	defer fake.setTaskPriorityMutex.RUnlock()
	return len(fake.setTaskPriorityArgsForCall)
}

func (fake *TaskPriorityUpdater) SetTaskPriorityCalls(stub func(context.Context, database.SetTaskPriorityParams) error) {
	fake.setTaskPriorityMutex.Lock()
	defer fake.setTaskPriorityMutex.Unlock()
	fake.SetTaskPriorityStub = stub
}

func (fake *TaskPriorityUpdater) SetTaskPriorityArgsForCall(i int) (context.Context, database.SetTaskPriorityParams) {
	fake.setTaskPriorityMutex.RLock()
	defer fake.setTaskPriorityMutex.RUnlock()
	argsForCall := fake.setTaskPriorityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TaskPriorityUpdater) SetTaskPriorityReturns(result1 error) {
	fake.setTaskPriorityMutex.Lock()
	defer fake.setTaskPriorityMutex.Unlock()
	fake.SetTaskPriorityStub = nil
	fake.setTaskPriorityReturns = struct {
		result1 error
	}{result1}
}

func (fake *TaskPriorityUpdater) SetTaskPriorityReturnsOnCall(i int, result1 error) {
	fake.setTaskPriorityMutex.Lock()
	defer fake.setTaskPriorityMutex.Unlock()
	fake.SetTaskPriorityStub = nil
	if fake.setTaskPriorityReturnsOnCall == nil {
		fake.setTaskPriorityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setTaskPriorityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TaskPriorityUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listByIDMutex.RLock()
	defer fake.listByIDMutex.RUnlock()
	fake.setTaskPriorityMutex.RLock()
	defer fake.setTaskPriorityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TaskPriorityUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.TaskPriorityUpdater = new(TaskPriorityUpdater)
